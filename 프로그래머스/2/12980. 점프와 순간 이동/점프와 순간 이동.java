import java.util.*;

/*
최소한의 코스트로 최대한의 결과를 뽑아야한다.
점프를 할 수 있는 거리는 무제한
-> 순간 이동을 가장 많이 사용해야한다.

최초 접근 -> 절반 거리까지만 이동한 뒤 절반 거리에서 순간 이동을 한다.
-> 위의 루프를 진행해야한다.
아래서 위로 흘러가는 코드를 작성하려고하자 코드 작성의 흐름을 만들기 어려움

-> 위의 루프를 위에서 아래로 내려가는 방식으로 해결

수도코드

loop. n > 0 조건
    if. 짝수 일 경우
        순간 이동을 사용한 것
    if. 홀수일 경우
        점프를 통해 이동
        점프 시 cost 증가
    
    n /= 2 
*/

public class Solution {
    public int solution(int n) {
        int ans = 0;
        
        while(n > 0){
            if(n % 2 != 0){
                ans++;
            }
            n /= 2;
        }
        return ans;
    }
}